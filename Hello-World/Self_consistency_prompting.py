# Self-consistency prompting is a technique where we ask the model to generate multiple responses to the same question and then take the majority vote of the responses.
from openai import OpenAI
import os
from dotenv import load_dotenv
load_dotenv()

token = os.environ["GITHUB_TOKEN"]
endpoint = "https://models.github.ai/inference"
modelNano = "openai/gpt-4.1-nano"
modelMini= "openai/gpt-4.1-mini"
model="openai/gpt-4.1"
modelO3="openai/o3"


client = OpenAI(
    base_url=endpoint,
    api_key=token,
)
System_Prompt="""
    Suppose you are a mathematics expert. You are asked to answer questions about mathematics.
    You have to only answer about mathematics. 
    you have to think about the solution about the mathematical problem step by step.
    Step 1: Understand the problem clearly.
    Step 2: You have to analyze the problem deeply.
    Step 3: you have to start thinking about the solution step by step.
    Step 4: You have find the answer of the question.
    Step 5: You have to again validate the answer like whether the solution is correct or not.
    Step 6: After validationm and again rechecking you have to arrive to the final solution of the problem.
    
    For example:->
    Que:-> Solve this expressio  2+3*6-2.
    Step 1: Understand the problem clearly.
    The problem is to solve the expression 2 + 3 * 6 - 2.
    Step 2: Analyze the problem deeply.
    The expression involves addition, multiplication, and subtraction. According to the order of operations (PEMDAS/BODMAS), we need to perform multiplication before addition and subtraction.
    Step 3: Start thinking about the solution step by step.
    First, we will solve the multiplication part of the expression. then we will solve the addition and subtraction.
    Step 4: Solve the multiplication part.
    3 * 6 = 18.
    Step 5: Now, substitute the multiplication result back into the expression.
    The expression now becomes 2 + 18 - 2.
    Step 6: Now, solve the addition and subtraction.
    2 + 18 = 20.
    20 - 2 = 18.
    Step 7: Validate the answer.
    The final answer is 18, which is correct.
    
    After doing all the steps You have to just give one mathematical number as a final output ,nothing else should be there in the final output. 

"""

question=2+5*10-8/4**2

reponses=[];
responseNano = client.chat.completions.create(
    model=modelNano,
    messages=[
        { "role": "system", "content": System_Prompt },
        { "role": "user", "content": f"Hi, , can you solve this mathematical expression {question}" },
    ]
)
print("🤖 of 4.1 nano:-> ",responseNano.choices[0].message.content);


reponses.append(responseNano.choices[0].message.content)

responseMini = client.chat.completions.create(
    model=modelMini,
    messages=[
        { "role": "system", "content": System_Prompt },
        { "role": "user", "content": "Hi, , can you solve this mathematical expression 2+5*10-8/4 to the power 2" },
    ]
)
print("🤖 of 4.1 mini:-> ",responseMini.choices[0].message.content)
reponses.append(responseMini.choices[0].message.content)


response = client.chat.completions.create(
    model=model,
    messages=[
        { "role": "system", "content": System_Prompt },
        { "role": "user", "content": "Hi, , can you solve this mathematical expression 2+5*10-8/4 to the power 2" },
    ]
)
print("🤖 of 4.1:-> ",response.choices[0].message.content)
reponses.append(response.choices[0].message.content)

# # Now we will take the majority vote of the responses
# from collections import Counter
# # Count the occurrences of each response
# response_counts = Counter(reponses)
# # Find the most common response
# most_common_response = response_counts.most_common(1)[0][0]
# print("Most common response:-> ", most_common_response)
# # This is the final response after self-consistency prompting

#printing the responses
print("Responses:")
for i in range(len(reponses)):
    print(f"{i+1}. {reponses[i]}")
    


meta_prompt = f"""
You are a mathematics expert.

You are given a question and three different answers generated by different AI models.

Your job is to analyze the responses and decide which one is most logically consistent and mathematically accurate.

You must also briefly explain **why** that answer is the best among the given choices.

---

Question: {question}

Responses:
1. {reponses[0]}
2. {reponses[1]}
3. {reponses[2]}

Which of the above (1/2/3) is the most accurate and consistent answer? Justify your choice in less than 100 words.
"""

meta_response = client.chat.completions.create(
    model=modelO3,
    messages=[
        { "role": "system", "content": "You are a mathematics expert." },
        { "role": "user", "content": meta_prompt },
    ]
)
print("🤖 of O3:-> ", meta_response.choices[0].message.content)
# This is the final response after self-consistency prompting
print("Final Answer:-> ", meta_response.choices[0].message.content)


